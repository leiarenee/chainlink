{
  "Comment": "State machine to run Terraform and Terragrunt Jobs.cxt",
  "StartAt": "Choice",
  "States": {
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.useInputs",
              "IsPresent": true
            },
            {
              "Variable": "$.useInputs",
              "BooleanEquals": true
            }
          ],
          "Next": "Session Variables"
        }
      ],
      "Default": "Test Inputs"
    },
    "Test Inputs": {
      "Type": "Pass",
      "Next": "Session Variables",
      "Result": {
        "command": "createLab",
        "context": {
          "user": {
            "userId": "test-user-id",
            "userEmail": "test@user.com"
          },
          "lab": {
            "courseName": "test course",
            "labId": "test-lab-id",
            "labFolder": "init-test-lab",
            "labVersion": "main",
            "activeLabId": "00",
            "labDuration": {
              "minutes": 10
            }
          }
        },
        "job": {
          "definition": "arn:aws:batch:eu-west-1:105931657846:job-definition/lab-job-handler:21",
          "queue": "arn:aws:batch:eu-west-1:105931657846:job-queue/lab_queue"
        },
        "role": {
          "eventBridge": "arn:aws:iam::105931657846:role/service-role/Amazon_EventBridge_Invoke_Batch_Job_Queue"
        },
        "aws": {
          "sqsAwsProfile": "lab-infrastructure"
        }
      }
    },
    "Session Variables": {
      "Type": "Pass",
      "Next": "CreateQueue",
      "Parameters": {
        "sqsQueueName.$": "States.Format('{}.fifo',$.context.lab.activeLabId)",
        "messageGroupId.$": "$$.Execution.Name",
        "jobName.$": "$$.Execution.Name",
        "cronName.$": "States.Format('SF-Cron-{}',$.context.lab.activeLabId)"
      },
      "ResultPath": "$.session"
    },
    "CreateQueue": {
      "Type": "Task",
      "Next": "Check Concurrency",
      "Parameters": {
        "QueueName.$": "$.session.sqsQueueName",
        "Attributes": {
          "FifoQueue": "true",
          "ContentBasedDeduplication": "true",
          "MessageRetentionPeriod": "600",
          "VisibilityTimeout": "10",
          "ReceiveMessageWaitTimeSeconds": "0"
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:createQueue",
      "ResultPath": "$.createQueue"
    },
    "Check Concurrency": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-west-1:105931657846:function:lab-state-machine-functions:$LATEST",
        "Payload": {
          "function": "check_concurrency",
          "kwargs": {
            "activeLabId.$": "$.context.lab.activeLabId",
            "stateMachineArn.$": "$$.StateMachine.Id",
            "jobQueue.$": "$.job.queue",
            "executionId.$": "$$.Execution.Id"
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "IsAlreadyRunning",
      "ResultPath": "$.checkConcurrency"
    },
    "IsAlreadyRunning": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.checkConcurrency.Payload",
          "BooleanEquals": true,
          "Next": "Already Running"
        },
        {
          "Variable": "$.checkConcurrency.Payload",
          "BooleanEquals": false,
          "Next": "Container Parameters"
        }
      ]
    },
    "Already Running": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Another Job with same active lab is already running",
            "error": true
          },
          "trace.$": "$"
        }
      },
      "ResultPath": "$.submitJobFailed",
      "Next": "Concurrency Failure"
    },
    "Concurrency Failure": {
      "Type": "Fail",
      "Cause": "Job with same active lab is already running",
      "Error": "ConcurrencyError"
    },
    "Container Parameters": {
      "Type": "Pass",
      "Next": "State Machine Started",
      "Parameters": {
        "Environment": [
          {
            "Name": "USER_ID",
            "Value.$": "$.context.user.userId"
          },
          {
            "Name": "USER_EMAIL",
            "Value.$": "$.context.user.userEmail"
          },
          {
            "Name": "ACTIVE_LAB_ID",
            "Value.$": "$.context.lab.activeLabId"
          },
          {
            "Name": "COURSE_NAME",
            "Value.$": "$.context.lab.courseName"
          },
          {
            "Name": "LAB_ID",
            "Value.$": "$.context.lab.labId"
          },
          {
            "Name": "LAB_FOLDER",
            "Value.$": "$.context.lab.labFolder"
          },
          {
            "Name": "SQS_AWS_PROFILE",
            "Value.$": "$.aws.sqsAwsProfile"
          },
          {
            "Name": "SQS_MESSAGE_GROUP_ID",
            "Value.$": "$.session.messageGroupId"
          },
          {
            "Name": "GITLAB_PROJECT_VERSION",
            "Value.$": "$.context.lab.labVersion"
          },
          {
            "Name": "EVENTBRIDGE_RULE",
            "Value.$": "$.session.cronName"
          },
          {
            "Name": "UPLOAD_WORKFOLDER",
            "Value": "always"
          }
        ]
      },
      "ResultPath": "$.container"
    },
    "State Machine Started": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "State Machine Started",
            "progress": 5
          },
          "trace.$": "$"
        }
      },
      "Next": "Command Selector",
      "ResultPath": "$.sqsApplySucceded"
    },
    "Command Selector": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.command",
          "StringEquals": "createLab",
          "Next": "Apply SubmitJob"
        },
        {
          "Variable": "$.command",
          "StringEquals": "destroyLab",
          "Next": "Destroy SubmitJob"
        },
        {
          "Variable": "$.command",
          "StringEquals": "updateCron",
          "Next": "Prepare Cron"
        },
        {
          "Variable": "$.command",
          "StringEquals": "deleteCron",
          "Next": "Delete Cron"
        }
      ],
      "Default": "Custom SubmitJob"
    },
    "Delete Cron": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-west-1:105931657846:function:lab-state-machine-functions:$LATEST",
        "Payload": {
          "function": "remove_cron",
          "kwargs": {
            "activeLabId.$": "$.context.lab.activeLabId"
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Delete Cron Succeded",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Delete Cron Failed"
        }
      ],
      "ResultPath": "$.deleteCron"
    },
    "Custom SubmitJob": {
      "Type": "Task",
      "Resource": "arn:aws:states:::batch:submitJob.sync",
      "Parameters": {
        "ContainerOverrides": {
          "Environment.$": "$.container.Environment",
          "Command.$": "States.Array($.command)"
        },
        "JobName.$": "$.session.jobName",
        "JobDefinition.$": "$.job.definition",
        "JobQueue.$": "$.job.queue"
      },
      "Next": "Job Succeeded",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 1,
          "IntervalSeconds": 1,
          "MaxAttempts": 0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Job Failed",
          "ResultPath": "$.submitJobOutput"
        }
      ],
      "ResultPath": "$.submitJobOutput"
    },
    "Job Succeeded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Job Succeeded",
            "progress": 98
          },
          "trace.$": "$"
        }
      },
      "Next": "State Machine Completed",
      "ResultPath": "$.submitJobSucceeded"
    },
    "Job Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Job Failed",
            "error": true
          },
          "trace.$": "$"
        }
      },
      "ResultPath": "$.submitJobFailed",
      "Next": "Batch Failure"
    },
    "Batch Failure": {
      "Type": "Fail",
      "Cause": "Batch Job Failure",
      "Error": "BatchError"
    },
    "Apply SubmitJob": {
      "Type": "Task",
      "Resource": "arn:aws:states:::batch:submitJob.sync",
      "Parameters": {
        "ContainerOverrides": {
          "Environment.$": "$.container.Environment",
          "Command": [
            "apply"
          ]
        },
        "JobName.$": "$.session.jobName",
        "JobQueue.$": "$.job.queue",
        "JobDefinition.$": "$.job.definition"
      },
      "Next": "Apply Succeeded",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 1,
          "IntervalSeconds": 5,
          "MaxAttempts": 0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Apply Failed",
          "ResultPath": "$.applyJobOutput"
        }
      ],
      "ResultPath": "$.applyJobOutput"
    },
    "Apply Succeeded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Apply Succeeded",
            "progress": 97
          },
          "trace.$": "$"
        }
      },
      "Next": "Prepare Cron",
      "ResultPath": "$.sqsApplySucceded"
    },
    "Prepare Cron": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-west-1:105931657846:function:lab-state-machine-functions:$LATEST",
        "Payload": {
          "function": "prepare_cron",
          "kwargs": {
            "minutes.$": "$.context.lab.labDuration.minutes"
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 2,
          "BackoffRate": 2
        }
      ],
      "Next": "PutRule CRON",
      "ResultPath": "$.prepareCron",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Cron Failed",
          "ResultPath": "$.prepareCron"
        }
      ]
    },
    "PutRule CRON": {
      "Type": "Task",
      "Parameters": {
        "Name.$": "$.session.cronName",
        "ScheduleExpression.$": "$.prepareCron.Payload",
        "EventBusName": "default"
      },
      "Resource": "arn:aws:states:::aws-sdk:eventbridge:putRule",
      "Next": "PutTargets CRON",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 1,
          "IntervalSeconds": 5,
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Cron Failed",
          "ResultPath": "$.cronPutRule"
        }
      ],
      "ResultPath": "$.cronPutRule"
    },
    "Cron Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Cron Failed",
            "error": true
          },
          "trace.$": "$"
        }
      },
      "ResultPath": "$.sqsCronUpdateFailed",
      "Next": "State Machine Completed"
    },
    "PutTargets CRON": {
      "Type": "Task",
      "Parameters": {
        "Rule.$": "$.session.cronName",
        "Targets": [
          {
            "Id": "1",
            "Arn.$": "$.job.queue",
            "RoleArn.$": "$.role.eventBridge",
            "BatchParameters": {
              "JobDefinition.$": "$.job.definition",
              "JobName.$": "$.session.jobName"
            },
            "Input": {
              "ContainerOverrides": {
                "Environment.$": "$.container.Environment",
                "Command": [
                  "destroy",
                  "cron"
                ]
              }
            }
          }
        ]
      },
      "Resource": "arn:aws:states:::aws-sdk:eventbridge:putTargets",
      "Next": "Cron Succeded",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 1,
          "IntervalSeconds": 5,
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Cron Failed",
          "ResultPath": "$.cronPutTargets"
        }
      ],
      "ResultPath": "$.cronPutTargets"
    },
    "Cron Succeded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Cron Succeeded",
            "progress": 99
          },
          "trace.$": "$"
        }
      },
      "Next": "State Machine Completed",
      "ResultPath": "$.sqsCronUpdateSucceeded"
    },
    "Apply Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Apply Failed",
            "error": true
          },
          "trace.$": "$"
        }
      },
      "ResultPath": "$.notifyFailure",
      "Next": "Destroy SubmitJob"
    },
    "Destroy SubmitJob": {
      "Type": "Task",
      "Resource": "arn:aws:states:::batch:submitJob.sync",
      "Parameters": {
        "ContainerOverrides": {
          "Environment.$": "$.container.Environment",
          "Command": [
            "destroy"
          ]
        },
        "JobName.$": "$.session.jobName",
        "JobDefinition.$": "$.job.definition",
        "JobQueue.$": "$.job.queue"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 1.5,
          "IntervalSeconds": 5,
          "MaxAttempts": 0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Destroy Failed",
          "ResultPath": "$.destroyJobOutput"
        }
      ],
      "Next": "Destroy Succeded",
      "ResultPath": "$.destroyJobOutput"
    },
    "Destroy Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Destroy Failed",
            "error": true
          },
          "trace.$": "$"
        }
      },
      "ResultPath": "$.sqsDestroyFailed",
      "Next": "Destroy Failure"
    },
    "Destroy Failure": {
      "Type": "Fail",
      "Error": "DestroyError"
    },
    "Destroy Succeded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Destroy Succeded",
            "progress": 97
          },
          "trace.$": "$"
        }
      },
      "ResultPath": "$.sqsDestroySucceeded",
      "Next": "State Machine Completed"
    },
    "State Machine Completed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "State Machine Completed",
            "progress": 100,
            "end": true
          },
          "trace.$": "$"
        }
      },
      "End": true,
      "ResultPath": "$.stateMachineCompleted"
    },
    "Delete Cron Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Delete Cron Failed",
            "error": true
          },
          "trace.$": "$"
        }
      },
      "ResultPath": "$.sqsDestroyFailed",
      "Next": "Delete Cron Failure"
    },
    "Delete Cron Failure": {
      "Type": "Fail",
      "Error": "CronDeleteError",
      "Cause": "Removing event bridge entry failed"
    },
    "Delete Cron Succeded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "QueueUrl.$": "$.createQueue.QueueUrl",
        "MessageGroupId.$": "$.session.messageGroupId",
        "MessageBody": {
          "message": {
            "status": "Delete Cron Succeded",
            "progress": 97
          },
          "trace.$": "$"
        }
      },
      "ResultPath": "$.sqsDestroySucceeded",
      "End": true
    }
  }
}