name: Runs AWS Step Functions for Terragrunt Jobs

on:
  workflow_call:
    inputs:
    # Required Arguments
      workspaceId:
        description: Workspace Id     
        type: string
        required: true
      targetAwsRegion:
        description: Target AWS Region     
        type: string
        required: true
      repoReference:
        description: Repository Reference - [branch|tag|hash]   
        type: string
        required: true
      tgCommand: 
        description: Terragrunt command
        type: string
        required: true
      stack:
        description: Main Stack Folder
        type: string
        required: true
      # Optional Arguments
      ttlDuration:
        description: Time to Live in minutes 
        type: string
      comment-id:
        description: 'The comment-id of the slash command'
        type: string
      repository:
        description: 'The repository from which the slash command was dispatched'
        type: string
      issue-number:
        type: string
jobs:
  execute-step-functions:
    runs-on: ubuntu-latest
    steps:
      # -------- Prepare Variables -----------
      - uses: jungwinter/split@v2
        id: split_stackFolder
        with:
          msg: ${{ inputs.stack }}
          separator: '//'
          maxsplit: 2
      - uses: jungwinter/split@v2
        id: split_repository
        with:
          msg: ${{ inputs.repository }}
          separator: '/'
          maxsplit: 2

      # -------- Checkout -----------
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: leiarenee/sf-pipeline  
          ref:  ${{ inputs.repoReference }} 

      # -------- Comment PR for Pipeline Tracing -----------
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID 
      - name: Comment Run Id
        if: ${{ inputs.comment-id != '' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.PAT_WORKFLOW }}
          repository: ${{ github.repository }}
          comment-id: ${{ inputs.comment-id }}
          body: |
            [Trace Github Pipeline ...](${{ steps.vars.outputs.run-url }})

      # -------- AWS CREDENTIALS -----------
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-session-name: Terragrunt-Validate-Build-Test-Workflow
        
      # ------------ EXECUTE -------------
      - name: Execute
        shell: bash
        run: ./sf-run/sf-execute.sh
        env: 
          # PYTHON
          PYTHONPATH: src
          PYTHONTRACEMALLOC: 25

          # WORKSPACE
          WORKSPACE_ID: ${{ inputs.workspaceId }}

          # INFRASTRUCTURE REPOSITORY
          VCS_PROVIDER: github
          REPO_ACCOUNT: ${{ steps.split_repository.outputs._0 }}
          REPO_NAME: ${{ steps.split_repository.outputs._1 }}
          REPO_REFERENCE: ${{ inputs.repoReference }}
          REPO_TYPE: public
          USER_NAME: ${{ github.triggering_actor }}

          # VERSIONS
          TERRAFORM_VERSION: 1.2.7
          TERRAGRUNT_VERSION: 0.38.7

          # TERRAGRUNT
          RUN_ALL: true
          TG_COMMAND: ${{ inputs.tgCommand }}
          RUN_MODULE: ${{ steps.split_stackfolder.outputs._1 }}
          STACK_FOLDER: ${{ steps.split_stackfolder.outputs._0 }}
          BUCKET_SUFFIX: github
          INTERACTIVE: false
          FORCE_INIT: false
          COMPACT_WARNINGS: true
          COMPACT_STDOUT: false
          LOG_LEVEL: info

          # AWS
          TARGET_AWS_REGION: ${{ inputs.targetAwsRegion }}
          TARGET_AWS_ACCOUNT_NAME: Testing Environment
          TARGET_AWS_ACCOUNT_ID: 553688522943
          TARGET_AWS_PROFILE: testing
          TARGET_AWS_SECRET: TARGET_AWS_ACCESS
          PIPELINE_AWS_REGION: eu-west-1
          PIPELINE_AWS_PROFILE: pipeline
          PIPELINE_AWS_ACCOUNT_ID: 377449198785
          PIPELINE_AWS_SECRET: PIPELINE_AWS_ACCESS
          ECR_AWS_ACCOUNT_ID: 377449198785
          SQS_AWS_PROFILE: pipeline

          # REPLACE Parameters
          DOMAIN: testing.dev.leiarenee.io
          DNS_ZONE_ID: Z0890541BQO7OVB8F6WL
          CERTIFICATE: arn:aws:acm:eu-west-1:377449198785:certificate/431ea958-254b-4f8c-995f-a311559fcce5
          CLUSTER: my-testing-k8s

          # PIPELINE
          RUNNER_MACHINE: github-actions
          WORK_FOLDER_NAME: temp-volume
          INITIAL_PROGRESS: 10
          MODULES_FINAL_PROGRESS: 90
          FINAL_PROGRESS: 95
          S3_JOBS_BUCKET: sf-pipeline-jobs
          EVENTBRIDGE_RULE: SF-Cron-Pipeline
          UPLOAD_WORKFOLDER: always
          UPLOAD_JOB_RESOURCES: true
          UPLOAD_PLAN_FILES: true
          SEND_SQS_MESSAGES: true
          SHOW_FILTERED_ERRORS: true
          COMMENT_ID: ${{ inputs.comment-id }}
          ISSUE_NUMBER: ${{ inputs.issue-number }}
          REPO_PIPELINE: sf-pipeline


          # JOB
          JOB_DEFINITION: arn:aws:batch:eu-west-1:377449198785:job-definition/tf_pipeline_job_definition
          JOB_QUEUE: arn:aws:batch:eu-west-1:377449198785:job-queue/tf-deployment-job-queue

          # ROLE
          ROLE_EVENTBRIDGE: arn:aws:iam::377449198785:role/service-role/Amazon_EventBridge_Invoke_Batch_Job_Queue

          # TTL
          TTL_DURATION_MINUTES: ${{ inputs.ttlDuration }}

          # STEP FUNCTIONS
          PIPELINE_STATE_MACHINE_NAME: Pipeline-State-Machine-enabling-drake
          PIPELINE_SF_TEMPLATE_FILE: sf-template.json

          # SQS POLLING
          POLL_INTERVAL: 5
          MAX_SQS_MESSAGES: 10

          # RUNTIME
          ECHO_COMMANDS: false

          # GITHUB
          # GITHUB_CONTEXT: ${{ toJson(github) }} 

          # AWS
          AWS_PAGER:
          AWS_RETRY_MODE: standard
          AWS_MAX_ATTEMPTS: 5

          # AWSF
          AWSF_MAX_ATTEMPTS: 5
          AWSF_BACKOFF_RATE: 3
          AWSF_EXPONENTIAL_BACKOFF: true
          AWSF_SILENT: true
        
      # ------------ TRACE ---------------
      - name: Trace
        shell: bash
        run: ./sf-run/sqs-poll.sh

      # ---- SUBMIT SUCCESS TO PR ---------
      - name: Create Success comment
        uses: peter-evans/create-or-update-comment@v2
        if: ${{ github.event.pull_request.number != '' }} 
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ${{ env.TG_COMMAND }} Command Succesfull
            ### Artifacts
            - [S3_JOB_FOLDER][1]
            
            [1]: ${{ env.S3_JOB_FOLDER }}
      
      # ------- SUBMIT PLAN to PR --------
      - name: Fetch Plans from S3
        id: fetch-plans
        if: ${{ env.TG_COMMAND == 'plan' && inputs.comment-id != '' }}
        run: |
          echo TG_COMMAND $TG_COMMAND
          echo S3_JOB_FOLDER $S3_JOB_FOLDER
          scripts/merge-plan-files.sh | tee comment-body.txt
          body="$(cat comment-body.txt | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g")"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          body="<pre>$body</pre>" 
          echo "::set-output name=body::$body"
      - name: Submit Plan to PR  
        if: ${{ env.TG_COMMAND == 'plan' && inputs.issue-number != '' }} 
        uses: peter-evans/create-or-update-comment@v2 # https://github.com/marketplace/actions/create-or-update-comment
        with:
          issue-number: ${{ inputs.issue-number }}
          body: ${{ steps.fetch-plans.outputs.body }}


      # ------- SUBMIT JOB RESOURCES to PR --------
      - name: Fetch Job Resources from S3
        id: fetch-job-resources
        if: ${{ env.TG_COMMAND == 'apply' && inputs.comment-id != '' }}
        run: |
          echo TG_COMMAND $TG_COMMAND
          echo S3_JOB_FOLDER $S3_JOB_FOLDER
          aws s3 cp ${S3_JOB_FOLDER}/job-resources/outputs.json ./outputs.json
          body="$(cat outputs.json | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g")"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          body="```json\n$body\n```" 
          echo "::set-output name=body::$body"
      - name: Submit Job Resources to PR  
        if: ${{ env.TG_COMMAND == 'apply' && inputs.issue-number != '' }} 
        uses: peter-evans/create-or-update-comment@v2 # https://github.com/marketplace/actions/create-or-update-comment
        with:
          issue-number: ${{ inputs.issue-number }}
          body: ${{ steps.fetch-job-resources.outputs.body }}


